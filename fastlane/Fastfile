# If you want to automatically update fastlane if a new version is available:
# update_fastlane

fastlane_version "1.89.0"

default_platform :ios

platform :ios do
  desc "Runs all the tests"
  lane :test do
    cocoapods
    scan(scheme:"Stage1st", devices: ["iPhone 7 Plus"])
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    if !options[:version]
      raise "No version specified!".red
    end

    cocoapods
    ensure_git_branch(branch: 'master')
    ensure_git_status_clean

    increment_version_number(version_number: options[:version])
    build_number_string = `git rev-list master | wc -l | awk '{print $1}'`
    build_number = (build_number_string.to_i + 4000).to_s
    increment_build_number(build_number: build_number)

    output_directory = "Archive/#{options[:version]}(#{build_number})"

    gym(
      scheme: 'Stage1st', 
      export_method: "app-store", 
      include_bitcode: false,
      output_directory: output_directory,
      export_options: {
        provisioningProfiles: {
          "Stage1st" => "Stage1stReaderDistribution"
        },
        manageAppVersionAndBuildNumber: false
      }
    )

    retry_count = 10
    begin
      pilot(skip_waiting_for_build_processing: true)
    rescue => ex
      if retry_count > 0
        retry_count -= 1
        sleep 3
        retry
      else
        raise ex
      end
    end

    commit_version_bump(
      xcodeproj: "Stage1st.xcodeproj",
      message: "Version bump to #{options[:version]}(#{build_number})."
    )
    
    retry_count = 10
    begin
      sentry_upload_dif(
        path: output_directory,
        include_sources: true,
        wait: true
      )
    rescue => ex
      puts "#{ex}"
      if retry_count > 0
        retry_count -= 1
        sleep 3
        retry
      else
        raise ex
      end
    end
  end

  after_all do |lane|
    slack(
        message: "Successfully execute lane."
    )
  end

  error do |lane, exception|
    slack(
        message: exception.message,
        success: false
    )
  end
end
